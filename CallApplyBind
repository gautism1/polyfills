CALL POLYFILL
 
  let obj ={
 name:"vipin",
 }
 function mymethod(a,b) 
    { 
            console.log(this.name,a,b)
     }

 let obj2={
 name:"hello"
 }
 
mymethod.call(obj);
 
 Function.prototype.mycall=function(...args)
{

let x=args[0];
x.fn=this;
let a=args.slice(1)
x.fn(a[0],a[1]);

} 
 mymethod.mycall(obj2,"hfhfh","jjjf");
 
 APPLY POLYFILL
 
  let obj ={
 name:"vipin",
 }
 function mymethod(...args) 
    { 
            console.log(this.name,args)
     }

let obj2={
 name:"hello"
 }
 
 mymethod.apply(obj,["gattu","battu"]);
 Function.prototype.myapply=function(...args)
{

 
let x=args[0];
 
x.fn=this;
let a=args[1]
 
x.fn(...a);

} 
 mymethod.myapply(obj,["hfhfh","jjjf"]);
 
 
 
 
 BINCD POLYFILLL
  let obj ={
 name:"vipin",
 }
 
 function mymethod(...args) 
    { 
            console.log(this.name,args)
     }
 
let as= mymethod.bind(obj,"gattu","battu");
 as("sdsds");
 
 Function.prototype.myBind=function(...args)
 {
 
  let x=args[0];
 let z=this;
 x.fn=this;
 let a=args.slice(1);
 return function(...args2)
 {
//    x.apply(z,["asa","Asasa"]) ;                                  //also we can use apply here
  
  
  x.fn(...a,args2);

 }
 
 } 
 let ac=mymethod.myBind(obj,"hfhfh","jjjf");
 ac("asa");
 
 
